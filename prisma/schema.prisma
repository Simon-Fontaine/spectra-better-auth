generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  emailVerified Boolean @default(false)
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // plugin fields
  username String @unique
  role String?
  banned Boolean? @default(false)
  banReason String?
  banExpires Int?

  Session Session[]
  Account Account[]
  Invite Invite[]

  @@map("user")
}

model Session {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  token String @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // plugin fields
  impersonatedBy String?

  @@map("session")
}

model Account {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  providerId String
  accessToken String?
  refreshToken String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id String @id @default(cuid())
  identifier String
  value String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

model Invite {
  id String @id @default(cuid())
  email String
  inviterId String
  inviter User @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invite")
}